using FluentValidation.AspNetCore;
using MicroElements.Swashbuckle.FluentValidation.AspNetCore;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using QuickBase.API.Middlewares;
using QuickBase.Business.AutoMapper;
using QuickBase.Business.Configurations;
using QuickBase.Business.Exceptions;
using QuickBase.Business.Helpers;
using QuickBase.Business.Interfaces.External;
using QuickBase.Business.Interfaces.Helpers;
using QuickBase.Business.Interfaces.Repositories;
using QuickBase.Business.Interfaces.Services;
using QuickBase.Business.Interfaces.SqliteData;
using QuickBase.Business.Services;
using QuickBase.ExternalDataSource;
using QuickBase.SqliteData;
using QuickBase.SqliteData.Repositories;
using System;
using System.IO;
using System.Reflection;

namespace QuickBase.API
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers()
                    .AddFluentValidation(c =>
                    {
                        c.RegisterValidatorsFromAssemblyContaining<Startup>();
                    });

            services.AddSwaggerGen(c =>
            {
                var assemblyVersion = Assembly.GetEntryAssembly().GetName().Version.ToString();
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "QuickBase API", Version = assemblyVersion });

                //Locate the XML file being generated by ASP.NET...
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                c.IncludeXmlComments(xmlPath);
            });

            services.AddAutoMapper(
                new Assembly[] 
                { 
                    Assembly.GetExecutingAssembly(),
                    typeof(EntityToDtoProfile).GetTypeInfo().Assembly 
                });

            services.AddFluentValidationRulesToSwagger();

            RegisterConfigurations(services);
            RegisterSqliteData(services);
            RegisterBusinessServices(services);
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseMiddleware<ExceptionMiddleware>();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            app.UseSwagger();

            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "QuickBase API");
                c.RoutePrefix = string.Empty;
            });
        }

        private void RegisterSqliteData(IServiceCollection services)
        {
            services.AddDbContext<SqliteContext>(options => options.UseSqlite(GetConnectionString()));
            
            services.AddTransient<IUnitOfWork, UnitOfWork>();
            services.AddTransient<ICityRepository, CityRepository>();
            services.AddTransient<ICountryRepository, CountryRepository>();
            services.AddTransient<IStateRepository, StateRepository>();
        }

        private void RegisterBusinessServices(IServiceCollection services)
        {
            services.AddTransient<ICountryService, CountryService>();
            services.AddTransient<ICityService, CityService>();
            services.AddTransient<IStateService, StateService>();
            services.AddTransient<IStatService, ConcreteStatService>();
            services.AddTransient<ICountryNamesHelper, CountryNamesHelper>();
        }

        private void RegisterConfigurations(IServiceCollection services)
        {
            var countryNamesConfiguration = Configuration.GetSection("CountryNamesConfiguration").Get<CountryNamesConfiguration>(c => c.BindNonPublicProperties = true);
            services.AddSingleton(countryNamesConfiguration);
        }

        /// <summary>Gets the connection string.</summary>
        /// <returns>The connection string.</returns>
        /// <exception cref="QuickBase.Business.Exceptions.DbConfigurationException"></exception>
        private string GetConnectionString()
        {
            var connectionString = Configuration["SqliteSettings:ConnectionString"];
            var dbFolder = Configuration["SqliteSettings:DbFolder"];
            var dbName = Configuration["SqliteSettings:DbName"];

            if (connectionString.IndexOf("{DbPath}") != -1)
            {
                var appCurrentPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                if (dbFolder == null || dbName == null)
                {
                    throw new DbConfigurationException();
                }

                var dbPath = Path.Combine(appCurrentPath, dbFolder, dbName);
                connectionString = connectionString.Replace("{DbPath}", dbPath);
            }
            return connectionString;
        }
    }
}
